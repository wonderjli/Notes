<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SCI_EN enable in FADT table</title>
    <link href="/2023/09/14/SCI_EN_in_FADT_table/"/>
    <url>/2023/09/14/SCI_EN_in_FADT_table/</url>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题，在uart log 中有一个error, 这个error是Edk2\UefiPayloadPkg\UefiPayloadEntry\AcpiTable.c 里的ParseAcpiInfo() 函数报出来的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!(Fadt-&gt;Flags &amp; EFI_ACPI_5_0_HW_REDUCED_ACPI) &amp;&amp;<br>    (Fadt-&gt;SmiCmd == <span class="hljs-number">0</span>) &amp;&amp;<br>    !SciEnabled)<br>&#123;<br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// The ACPI enabling status is inconsistent: SCI is not enabled but ACPI</span><br>  <span class="hljs-comment">// table does not provide a means to enable it through FADT-&gt;SmiCmd</span><br>  <span class="hljs-comment">//</span><br>  DEBUG ((<br>    DEBUG_ERROR,<br>    <span class="hljs-string">&quot;ERROR: The ACPI enabling status is inconsistent: SCI is not&quot;</span><br>    <span class="hljs-string">&quot; enabled but the ACPI table does not provide a means to enable it through FADT-&gt;SmiCmd.&quot;</span><br>    <span class="hljs-string">&quot; This may cause issues in OS.\n&quot;</span><br>    ));<br>&#125;<br></code></pre></td></tr></table></figure><p>以下三个条件满足才会触发这个报错：</p><ol><li>HARDWARE_REDUCED_ACPI is not set;</li><li>SMI_CMD field is zero;</li><li>SCI_EN bit is zero;</li></ol><p><img src="/2023/09/14/SCI_EN_in_FADT_table/FADT_Table.png"><br>因为SMI_CMD, SCI_EN这个2个值是在FADT table里的，用AcpiDump tool 把当前BIOS 里的FADT table下载后，发现这个table中这2个值的确都是0.<br>奇怪的地方是，如果SCI_EN 这个值为0的话，机器boot到OS的时候会报错，但是现在可以正常进入CentOS，而且在OS中下载的FADT table里面的SCI_EN值也是0.</p><p>正常情况下，OSPM做一些操作，比如会将ACPI_EN/ACPI_DISABLE 写入SMI_CMD中，使OS进入特定状态。或者将其他值写入SMI_CMD，来达到使OS进入睡眠状态等等。<br>但是，在FADT table中，SMI_CMD的值也是0，以上这些操作是无法实现的。</p><p>综上，怀疑可能是其他某个地方将SCI_EN的值enable, 不需要OS 从FADT table 中取这些值了，所以FADT Table中的值是什么都无所谓。<br>经过大佬的指点，发现还真这样！<br>在BIOS code中，有一段代码会enable SCI_EN的，将其置为1. 位置是DXE 阶段，在某个driver 中注册一个EfiExitBootServicesEvent handler, 这个event group中有一个callback 函数，这个函数会读取PM1a_CNT_BLK address 里的值，并将SCI_EN 置为1(Bit0 = 1).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">\ServerPlatformPkg\Features\Acpi\Dxe\AcpiPlatform\AcpiPlatform.c<br>  <span class="hljs-comment">// Register ExitBootServicesEvent handler</span><br>  Status = gBS-&gt;CreateEventEx (<br>                  EVT_NOTIFY_SIGNAL,<br>                  TPL_CALLBACK,<br>                  AcpiOnExitBootServicesCallback,<br>                  <span class="hljs-literal">NULL</span>,<br>                  &amp;gEfiEventExitBootServicesGuid,<br>                  &amp;Event<br>                  );<br></code></pre></td></tr></table></figure><p>关于PM1a_CNT_BLK 这个System port address 里的值，ACPI spec 里也有详细的说明，可以在文档直接搜索PM1 Control Registers 来查看这个寄存器里各Bit位的意义。在这个问题中，Bit0就是SCI_EN.<br><img src="/2023/09/14/SCI_EN_in_FADT_table/PM1_CNT_BLK.png"></p><p>Tips: 看了文档之后发现，SMI_CMD, SCI_EN这几个值都是可以为0的，在spec 里也说明了 “This field is reserved and must be zero on systems that do not support Legacy Mode.” (此字段为保留字段，在不支持传统模式的系统上必须为 0)</p><h5 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h5><p><a href="https://blog.csdn.net/qq_37342551/article/details/115792015">https://blog.csdn.net/qq_37342551/article/details/115792015</a><br><a href="https://lists.sr.ht/~philmd/edk2/patches/3142">https://lists.sr.ht/~philmd/edk2/patches/3142</a><br><a href="https://edk2.groups.io/g/devel/topic/30912914#25755">https://edk2.groups.io/g/devel/topic/30912914#25755</a></p>]]></content>
    
    
    <categories>
      
      <category>Issues</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACPI</tag>
      
      <tag>FADT</tag>
      
      <tag>SMI</tag>
      
      <tag>SCI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FWTS tool 的搭建和测试方法</title>
    <link href="/2023/09/13/BuildAndTestGuideForFWTS/"/>
    <url>/2023/09/13/BuildAndTestGuideForFWTS/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#firmwaretestsuite-fwts">FirmwareTestSuite (FWTS)</a><ul><li><a href="#install-fwts-tool">Install FWTS tool</a></li><li><a href="#run-and-test">Run and test</a></li><li><a href="#reference-links">Reference Links</a></li></ul></li></ul><h1 id="FirmwareTestSuite-FWTS"><a href="#FirmwareTestSuite-FWTS" class="headerlink" title="FirmwareTestSuite (FWTS)"></a>FirmwareTestSuite (FWTS)</h1><p>官方网站：<a href="https://wiki.ubuntu.com/FirmwareTestSuite">https://wiki.ubuntu.com/FirmwareTestSuite</a><br>项目地址：<a href="https://github.com/ColinIanKing/fwts">https://github.com/ColinIanKing/fwts</a></p><p>Test Range:<br>acpiinfo xenv xsdt wsmt wpbt wmi wdat waet uefi tpm2 tcpa svkl<br>stao srat spmi spcr slit slic sdev sdei sbst rsdt rsdp rgrt rasf pptt pmtt phat<br>pdtt pcct pcc nfit method msdm msct mpst mpam mchi mcfg madt lpit ivrs iort hmat<br>hpet hest gtdt fpdt fadt facs erst einj ecdt drtm dppt dmar acpi_wpc acpi_time<br>acpi_als acpi_nvdimm acpi_lid acpi_slpb acpi_pwrb acpi_ec smart_battery<br>acpi_battery acpi_ac dbg2 dbgp cstates csrt cpep checksum cedt boot bgrt bert<br>aspt asf apicinstance aest acpitables</p><h2 id="Install-FWTS-tool"><a href="#Install-FWTS-tool" class="headerlink" title="Install FWTS tool"></a>Install FWTS tool</h2><p>(Check your OS type, for example, if the OS is CentOS, the OS belongs to RedHat, so configure the dependencies according to RHEL.)</p><ol><li><p>Configure the dependencies for FWTS according to README<br><code>sudo yum install autoconf automake kernel-devel libtool flex flex-devel bison dkms libfdt libfdt-devel dtc pcre-devel pcre2 pcre2-devel pcre2-utf16 pcre2-utf32 glib2 glib2-devel pciutils pciutils-devel zlib-devel make libbsd-devel</code></p></li><li><p>Download FWTS source code:<br><code>git clone https://github.com/ColinIanKing/fwts</code></p></li><li><p>Go to the folder<br><code>cd fwts</code></p></li><li><p>To build and install (only if building from source)<br><code>autoreconf -ivf</code><br><code>./configure</code><br><code>make</code><br><code>sudo make install</code></p></li></ol><h2 id="Run-and-test"><a href="#Run-and-test" class="headerlink" title="Run and test"></a>Run and test</h2><blockquote><ul><li>Run all tests<br>sudo fwts</li></ul></blockquote><blockquote><ul><li>Run all ACPI tests and rename the generated file name to RenameResults.log<br>sudo fwts –acpitest -r RenameResults.log</li></ul></blockquote><blockquote><ul><li>Test a single ACPI table<br>sudo fwts SingleTable -r SingleTableResults.log<br>eg: sudo fwts dmar -r DMAR.log</li></ul></blockquote><blockquote><ul><li>Dump related files<br>sudo fwts –dump<br>Instruction: README.txt/dmesg.log/dmidecode.log/lspci.log/acpidump.log/cpuinfo.log will be generated</li></ul></blockquote><h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://canonical.com/blog/debug-acpi-tables-with-firmware-test-suite-fwts">https://canonical.com/blog/debug-acpi-tables-with-firmware-test-suite-fwts</a><br><a href="https://canonical.com/blog/analyze-acpi-tables-in-a-text-file-with-fwts">https://canonical.com/blog/analyze-acpi-tables-in-a-text-file-with-fwts</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FWTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>43</title>
    <link href="/2023/08/22/43/"/>
    <url>/2023/08/22/43/</url>
    
    <content type="html"><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p>PCH   Platform Controller Hub</p><p>Socket:     指物理cpu，就是实打实可以拿在手上的那个。比如一个服务器上有要安装2个cpu，也就是2 socket.<br>Core:       核。现在科技发展，cpu通常都是多核。<br>Processor/Thread:  中文叫处理器/线程。processor/thread的数量取决于BIOS setup中会不会打开超线程(hyper-threading)，如果打开超线程的话，那一个core就有2个logic core, 即2个processor. 当然，不打开超线程的话，一个core 只有一个processor.<br>一个物理cpu/socket内部，分为cores部分和uncore modules部分。<br>Register:   寄存器。寄存器位于cpu内部，用于存放程序执行中用到的数据和指令，cpu从寄存器中获取数据，相比从内存中获取快得多。</p><p>在linux下，我们可以通过以下命令来查看当前机器的cpu拓扑结构：<br><img src="/2023/08/22/43/image.png" alt="Alt text"><br>由上可见，该机器的主板上有一个cpu插槽（socket），这个插槽上的cpu有2核（core），且每核上又有2个线程（thread），也就是说，这个机器是2核4线程的。<br>上图中thread总数是用cpu来表示的，这也是为什么上文说，cpu是个比较宽泛的概念，在不同的语境下有不同的定义，这里表示的就是逻辑核，也就是thread。</p><h2 id="地址解释"><a href="#地址解释" class="headerlink" title="地址解释"></a>地址解释</h2><p>Physical Address: 物理地址。BIOS在遍历一遍计算机硬件后，将所有硬件的存储空间进行了统一的编址（不算硬盘的存储空间），这个编址就是物理地址。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>22</title>
    <link href="/2023/08/20/22/"/>
    <url>/2023/08/20/22/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU-IO-Mem之间的关系"><a href="#CPU-IO-Mem之间的关系" class="headerlink" title="CPU, IO, Mem之间的关系"></a>CPU, IO, Mem之间的关系</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>CPU： 工人，干活的，判断以及逻辑处理<br>内存：车间，工人干活的地方，车间中加工原料，当车间中没有原料了，在从仓库中取原料，对原料进行加工 内存本身有一定的存储空间，对内存中的数据进行处理的速度比从硬盘取数据再处理的速度快很多<br>硬盘：仓库，原料，数据存储</p><h2 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h2><p>CPU对数据进行判断以及逻辑处理，本身不能存储数据，这时cpu从内存取数据进行逻辑计算，如果内存没有数据，才会从硬盘读数据到内存，再对数据进行处理<br>就像人吃饭一样，cpu就是人，内存就是碗，硬盘就是饭锅！<br>当cpu进程等待，会造成内存开销的增加，内存不够用的时候会用到虚拟内存，导致虚拟内存的增加，这时磁盘IO开销就会增加，系统态sy%提升，cpu开销增加；内存里数据不够用，才用磁盘中取数据。</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>Issues</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Get and parse ACPI table under CentOS</title>
    <link href="/2023/07/25/GetACPITableUnderCentOS/"/>
    <url>/2023/07/25/GetACPITableUnderCentOS/</url>
    
    <content type="html"><![CDATA[<p>之前遇到过一个问题，说是在CentOS下使用自带的命令acpidump 获取ACPI table 时，会报”Segmentation fault (core dumped)” 错误。<br>因为在shell 下用AcpiDump tool 是可以正常获取ACPI table的，所有有点怀疑是不是CentOS 自带的命令有问题，事实也证明是CentOS 自带的acpidump 命令的版本过低导致的问题。<br>后来，在网上看到一个可以直接在Linux 中查看所有ACPI table的方法。</p><h3 id="在Linux-中获取ACPI-table-方法1"><a href="#在Linux-中获取ACPI-table-方法1" class="headerlink" title="在Linux 中获取ACPI table 方法1"></a>在Linux 中获取ACPI table 方法1</h3><p>Linux 中ACPI table 所在位置：<br> /sys/firmware/acpi/tables/</p><ol><li><p>可以在上面的路径概览所有的ACPI table<br><code>sudo tree</code>  </p></li><li><p>将DSDT table 的内容放到DSDT.aml 上<br><code>sudo cat /sys/firmware/acpi/tables/DSDT &gt; DSDT.aml</code></p></li><li><p>安装iasl tool<br><code>sudo yum install iasl</code></p></li><li><p>使用iasl tool 将*.aml 转换为*.dsl<br><code>sudo iasl -d DSDT.aml</code></p></li><li><p>打开DSDT.dsl 文件<br><code>sudo cat DSDT.dsl</code></p></li></ol><h3 id="在Linux-中获取ACPI-table-方法2"><a href="#在Linux-中获取ACPI-table-方法2" class="headerlink" title="在Linux 中获取ACPI table 方法2"></a>在Linux 中获取ACPI table 方法2</h3><p>第二种方法就是直接用Linux 自带的命令<code>acpidump</code> 来获取。</p><ul><li><code>sudo yum install acpica-tools</code></li><li><code>sudo acpidump -s</code> 查看现有的表</li><li><code>acpidump -n DSDT -b</code></li><li><code>ls</code></li><li><code>iasl -d DSDT.dat </code></li></ul><h3 id="在Linux-中获取ACPI-table-方法3"><a href="#在Linux-中获取ACPI-table-方法3" class="headerlink" title="在Linux 中获取ACPI table 方法3"></a>在Linux 中获取ACPI table 方法3</h3><p>第三种就有点麻烦了，需要用FWTS tool 来获取，输入以下任意一个命令，会生成acpidump.log</p><ul><li><code>sudo fwts --dump</code> / <code>sudo fwts acpidump -</code></li></ul><h5 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h5><p><a href="https://blog.csdn.net/fastboy_abc/article/details/86558913">https://blog.csdn.net/fastboy_abc/article/details/86558913</a><br><a href="https://blog.csdn.net/jiangwei0512/article/details/83317890">https://blog.csdn.net/jiangwei0512/article/details/83317890</a><br><a href="https://blog.csdn.net/weixin_41028621/article/details/125142253">https://blog.csdn.net/weixin_41028621/article/details/125142253</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hanjuan52</title>
    <link href="/2023/02/25/hanjuansb/"/>
    <url>/2023/02/25/hanjuansb/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
